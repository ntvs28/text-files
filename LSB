from PIL import Image
import numpy as np

# Function to encode the message into the image
def Encode(src, message, dest):
    img = Image.open(src, 'r')
    width, height = img.size
    array = np.array(list(img.getdata()))
    
    if img.mode == 'RGB':
        n = 3
    elif img.mode == 'RGBA':
        n = 4
    else:
        print("Unsupported image mode!")
        return

    total_pixels = array.size // n

    # Append a delimiter to the message to indicate its end
    message += "$t3g0"
    # Convert message to binary
    b_message = ''.join([format(ord(i), "08b") for i in message])
    req_pixels = len(b_message)

    if req_pixels > total_pixels * 3:
        print("ERROR: Need larger file size")
        return
    else:
        index = 0
        for p in range(total_pixels):
            for q in range(0, 3):  # Iterate over RGB channels
                if index < req_pixels:
                    # Modify the LSB of the pixel
                    array[p][q] = int(bin(array[p][q])[2:9] + b_message[index], 2)
                    index += 1

        array = array.reshape(height, width, n)
        enc_img = Image.fromarray(array.astype('uint8'), img.mode)
        enc_img.save(dest)
        print("Image Encoded Successfully")

# Function to decode the message from the image
def Decode(src):
    img = Image.open(src, 'r')
    array = np.array(list(img.getdata()))
    
    if img.mode == 'RGB':
        n = 3
    elif img.mode == 'RGBA':
        n = 4
    else:
        print("Unsupported image mode!")
        return

    total_pixels = array.size // n
    hidden_bits = ""

    for p in range(total_pixels):
        for q in range(0, 3):  # Extract from RGB channels
            hidden_bits += bin(array[p][q])[-1]

    # Convert binary data to characters
    hidden_message = ""
    for i in range(0, len(hidden_bits), 8):
        char = chr(int(hidden_bits[i:i+8], 2))
        hidden_message += char
        if hidden_message[-5:] == "$t3g0":  # Stop at delimiter
            break

    print("Decoded Message: ", hidden_message[:-5])

# Menu-driven interface
def Stego():
    print("-- Welcome to $t3g0 Steganography --")
    print("1: Encode")
    print("2: Decode")
    func = input("Choose an option: ")

    if func == '1':
        src = input("Enter Source Image Path: ")
        message = input("Enter Message to Hide: ")
        dest = input("Enter Destination Image Path: ")
        print("Encoding...")
        Encode(src, message, dest)
    elif func == '2':
        src = input("Enter Source Image Path: ")
        print("Decoding...")
        Decode(src)
    else:
        print("Invalid option! Please choose 1 or 2.")

# Run the program
Stego()
